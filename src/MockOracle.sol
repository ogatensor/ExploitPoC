// SPDX-License-Identifier: MIT 
pragma solidity ^0.8.0; // Specifies the compiler version of Solidity

contract MockOracle is IOracle { // Defines a contract named MockOracle and makes it inherit from IOracle
    // Mapping to store prices for different assets
    mapping(address => uint256) public prices; // A public mapping to store asset prices

    // Function to set the price for a given asset
    function setPrice(address asset, uint256 price) public { // Sets the price for a specific asset
        prices[asset] = price; // Assigns the price to the asset in the mapping
    }

    // Function to get the price for a given asset
    function getPrice(address asset, uint manipulationFactor) public view returns (uint256) { // Returns the price for an asset, adjusted by a manipulation factor
        return prices[asset] * manipulationFactor; // Multiplies the stored price by the manipulation factor
    }

    // Function to view the price for a given asset
    function viewPrice(address asset, uint manipulationFactor) public view returns (uint256) { // Views the price for an asset, adjusted by a manipulation factor
        return prices[asset] * manipulationFactor; // Multiplies the stored price by the manipulation factor
    }

    // Function to simulate a vulnerability: return a manipulated price
    function getManipulatedPrice(address asset, uint256 manipulationFactor) public view returns (uint256) { // Returns a manipulated price for an asset
        return prices[asset] * manipulationFactor; // Multiplies the stored price by the manipulation factor
    }
}